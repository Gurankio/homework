const data = [
    {"title": "Slide 14","body": "Blocchi di codice nella pagina   \n","html": "<html>\n <head>\n  <script>\n   // codice JavaScript\n  </script>\n </head>\n <body>\n  <script>\n   // codice JavaScript\n  </script>\n  <script>\n   // codice JavaScript\n  </script>\n </body>\n</html>"},
    {"title": "Slide 20","body": "innerHTML Per accedere a un elemento HTML, JavaScript può utilizzare il metodo document.getElementById(id). L'attributo id definisce l'elemento HTML. La proprietà innerHTML definisce il contenuto HTML.   \n","html": "<html>\n <head>\n </head>\n <body>\n  <h1>\n   La mia prima pagina web\n  </h1>\n  <p id=\"testo\">\n  </p>\n  <script>\n   document.getElementById(\"testo\").innerHTML = \"Ciao!\";\n  </script>\n </body>\n</html>"},
    {"title": "Slide 21","body": "document.write() Un altro metodo i visualizzazione dell'output JavaScript è il metodo document.write().    \n","html": "<html>\n <head>\n </head>\n <body>\n  <h1>\n   La mia prima pagina web\n  </h1>\n  <script>\n   document.write(\"Ciao!\");\n  </script>\n </body>\n</html>"},
    {"title": "Slide 22","body": "document.write() Attenzione! L'utilizzo di document.write() dopo il caricamento di un documento HTML eliminerà tutta la pagina HTML esistente. Tale metodo dovrebbe essere utilizzato solo per i test.   \n","html": "<html>\n <head>\n </head>\n <body>\n  <h1>\n   La mia prima pagina web\n  </h1>\n  <script>\n   document.write(\"Ciao!\");\n  </script>\n  <br/>\n  <button onclick=\"document.write(5 +      6)\" type=\"button\">\n   Cliccami\n  </button>\n </body>\n</html>"},
    {"title": "Slide 23","body": "window.alert() Con questo metodo è possibile ottenere una casella di avviso per visualizzare i dati.   \n","html": "<html>\n <head>\n </head>\n <body>\n  <h1>\n   La mia prima pagina web\n  </h1>\n  <script>\n   window.alert(5 + 6);\n  </script>\n </body>\n</html>"},
    {"title": "Slide 24","body": "window.alert() In JavaScript, l'oggetto window rappresenta anche il contesto di esecuzione globale vengono definite variabili e funzioni globali. Ciò significa anche che la specifica della parola chiave window è facoltativa.   \n","html": "<html>\n <head>\n </head>\n <body>\n  <h1>\n   La mia prima pagina web\n  </h1>\n  <script>\n   alert(5 + 6);\n  </script>\n </body>\n</html>"},
    {"title": "Slide 25","body": "console.log() Il metodo console.log() viene utilizzato per effettuare il debug e per visualizzare i dati nel browser.    \n","html": "<html>\n <head>\n </head>\n <body>\n  <h1>\n   La mia prima pagina web\n  </h1>\n  <p>\n   Premi F12 per attivare il debug.\n  </p>\n  <p>\n   Selezione \"Console\" nel menù del debugger.\n  </p>\n  <script>\n   console.log(5 + 6);\n  </script>\n </body>\n</html>"},
    {"title": "Slide 26","body": "window.print() È possibile stampare una pagina web utilizzando un semplice codice in JavaScript. Il metodo print() stampa il contenuto della finestra corrente aprendo la finestra di dialogo \"Stampa\" che consente di scegliere tra varie opzioni di stampa.   \n","html": "<html>\n <head>\n </head>\n <body>\n  <h1>\n   La mia prima pagina web\n  </h1>\n  <button onclick=\"window.print()\">\n   Stampa la      pagina\n  </button>\n </body>\n</html>"},
    {"title": "Slide 42","body": "Variabili Le variabili JavaScript sono contenitori per l'archiviazione dei valori dei dati. In questo esempio, x, y, e z, sono variabili, dichiarate con la parola chiave var:  \n","html": "<html>\n <body>\n  <h2>\n   Variabili JavaScript\n  </h2>\n  <p>\n   In questo esempio, x, y, e z sono variabili.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var x = 5;       var y = 6;       var z = x + y;       document.getElementById(\"demo\").innerHTML =       \"Il valore di z è: \" + z;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 44","body": "var Nella programmazione, proprio come in algebra, usiamo variabili (come prezzo1) per contenere valori e nelle espressioni (totale = prezzo1 + prezzo2).    \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Variables\n  </h2>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var prezzo1 = 5;       var prezzo2 = 6;       var totale = prezzo1 + prezzo2;       document.getElementById(\"demo\").innerHTML =       \"Il totale è: \" + totale;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 47","body": "Tipi di dato Le variabili JavaScript possono contenere numeri come 100 e valori di testo come \"Marco Polo\". Nella programmazione, i valori di testo sono chiamati stringhe di testo. Le stringhe sono scritte tra virgolette doppie o singole. I numeri sono scritti senza virgolette. Mettendo un numero tra virgolette, verrà trattato come una stringa di testo.  \n","html": "<html>\n <body>\n  <h2>\n   Variabili JavaScript\n  </h2>\n  <p>\n   Le stringhe sono scritte tra virgolette.\n  </p>\n  <p>\n   I numeri vengono scritti senza virgolette.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var pi = 3.14;       var persona = \"Marco Polo\";       var città = 'Venezia';       document.getElementById(\"demo\").innerHTML =       pi + \"<br>\" + persona + \"<br>\" + città;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 49","body": "Esempio  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Variables\n  </h2>\n  <p>\n   Create a variable, assign a value to it, and display it:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var carName;       carName = \"Volvo\";       document.getElementById(\"demo\").innerHTML =       carName;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 50","body": "Dichiarazioni È possibile dichiarare molte variabili in un'unica istruzione. Per fare questo bisogna iniziare l'istruzione con var e separare le variabili con una virgola.   \n","html": "<html>\n <body>\n  <h2>\n   Variabili JavaScript\n  </h2>\n  <p>\n   Puoi dichiarare molte variabili in un'unica      istruzione.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var persona = \"Marco Polo\", carName = \"Volvo\",        prezzo = 200;       document.getElementById(\"demo\").innerHTML = carName;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 51","body": "Dichiarazioni Una dichiarazione può estendersi su più righe. L'esempio precedente può anche essere scritto nel modo seguente:   \n","html": "<html>\n <body>\n  <h2>\n   Variabili JavaScript\n  </h2>\n  <p>\n   Puoi dichiarare molte variabili in un'unica      istruzione.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var persona = \"Marco Polo\",       carName = \"Volvo\",       prezzo = 200;       document.getElementById(\"demo\").innerHTML =        carName;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 52","body": "undefined Nei programmi per computer, le variabili vengono spesso dichiarate senza valore. Il valore può essere qualcosa che deve essere calcolato o qualcosa che verrà fornito in seguito, come l'input dell'utente. Una variabile dichiarata senza un valore avrà il valore undefined. La variabile carName avrà il valore undefined dopo l'esecuzione di questa istruzione:  \n","html": "<html>\n <body>\n  <h2>\n   Variabili JavaScript\n  </h2>\n  <p>\n   Una variabile dichiarata senza un valore avrà il     valore undefined.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var carName;       document.getElementById(\"demo\").innerHTML = carName;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 53","body": "Ridichiarazione di una variabile Dichiarando nuovamente una variabile JavaScript, non perderà il suo valore. La variabile carName avrà ancora il valore \"Volvo\" dopo l'esecuzione di queste istruzioni:  \n","html": "<html>\n <body>\n  <h2>\n   Variabili JavaScript\n  </h2>\n  <p>\n   Se dichiari nuovamente una variabile JavaScript, non     perderà il suo valore.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var carName = \"Volvo\";       var carName;       document.getElementById(\"demo\").innerHTML = carName;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 54","body": "Operazioni aritmetiche Come con l'algebra, è possibile eseguire operazioni aritmetiche con variabili JavaScript, utilizzando operatori come = e +  \n","html": "<html>\n <body>\n  <h2>\n   Variabili JavaScript\n  </h2>\n  <p>\n   Il risultato della somma di 5 + 2 + 3 è:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var x = 5 + 2 + 3;       document.getElementById(\"demo\").innerHTML = x;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 55","body": "Somma di stringhe È anche possibile sommare stringhe, ma le stringhe verranno concatenate:   \n","html": "<html>\n <body>\n  <h2>\n   Variabili JavaScript\n  </h2>\n  <p>\n   Il risultato della somma di \"Marco\" + \" \" +     \"Polo\" è:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var x = \"Marco\" + \" \" + \"Polo\";       document.getElementById(\"demo\").innerHTML = x;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 56","body": "Casi particolari Se inseriamo un numero tra virgolette, il resto dei numeri verrà trattato come stringhe e concatenato.  \n","html": "<html>\n <body>\n  <h2>\n   Variabili JavaScript\n  </h2>\n  <p>\n   Il risultato della somma di \"5\" + 2 + 3     è:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   x = \"5\" + 2 + 3;       document.getElementById(\"demo\").innerHTML = x;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 57","body": "Casi particolari Le cifre prima della stringa verranno invece trattate come numeri.  \n","html": "<html>\n <body>\n  <h2>\n   Variabili JavaScript\n  </h2>\n  <p>\n   Il risultato della somma di 2 + 3 + \"5\" + 6 +     7 è:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   x = 2 + 3 + \"5\" + 6 + 7;       document.getElementById(\"demo\").innerHTML = x;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 63","body": "Ambito globale - Esempio .  È possibile accedere alle variabili globali da qualsiasi punto in un programma JavaScript. \n","html": "<html>\n <body>\n  <h2>\n   Ambito globale JavaScript\n  </h2>\n  <p>\n   È possibile accedere a una variabile globale da qualsiasi     script o funzione.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var carName = \"Volvo\"; /*variabile dichiarata prima             della funzione */       myFunction();       function myFunction() {         document.getElementById(\"demo\").innerHTML =          \"Posso visualizzare\" +  carName;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 65","body": "Ambito della funzione - Esempio   È possibile accedere alle variabili locali solo dall'interno della funzione in cui sono dichiarate. \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Block Scope\n  </h2>\n  <p>\n   Al di fuori della funzione carName assume il valore undefined.\n  </p>\n  <p id=\"demo1\">\n  </p>\n  <p id=\"demo2\">\n  </p>\n  <script>\n   myFunction();       function myFunction() {         var carName = \"Volvo\"; /*variabile dichiarata nello stesso blocco della          funzione */         document.getElementById(\"demo1\").innerHTML =          typeof carName + \" \" + carName; /*typeof restituisce il tipo della         variabile*/       }       document.getElementById(\"demo2\").innerHTML = typeof carName;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 69","body": "Esempio  \n","html": "<html>\n <body>\n  <h2>\n   Ambiti JavaScript\n  </h2>\n  <script>\n   {  {    var x = 5;        }        let y = 7;       }       document.write(x);       document.write(y);\n  </script>\n </body>\n</html>"},
    {"title": "Slide 71","body": "Esempio  \n","html": "<html>\n <body>\n  <h2>\n   Dichiarazione di una variabile utilizzando var\n  </h2>\n  <p>\n   La variabile x dichiarata all'inizio vale\n  </p>\n  <p id=\"prova\">\n  </p>\n  <hr/>\n  <p>\n   La variabile x dichiarata all'interno del blocco vale\n  </p>\n  <p id=\"prova1\">\n  </p>\n  <script>\n   var x = 10; // in questo blocco x vale 10       {         var x = 2; // in questo blocco x vale 2         document.getElementById(\"prova\").innerHTML = x;       }       // in questo blocco x vale 2       document.getElementById(\"prova1\").innerHTML = x;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 73","body": "Esempio  \n","html": "<html>\n <body>\n  <h2>\n   Dichiarazione di una variabile utilizzando let\n  </h2>\n  <p>\n   La variabile x dichiarata all'inizio vale\n  </p>\n  <p id=\"prova\">\n  </p>\n  <hr/>\n  <p>\n   La variabile x dichiarata all'interno del blocco vale\n  </p>\n  <p id=\"prova1\">\n  </p>\n  <script>\n   var x = 10; // in questo blocco x vale 10       {         let x = 2; // in questo blocco x vale 2         document.getElementById(\"prova\").innerHTML = x;       }       // in questo blocco x vale 10       document.getElementById(\"prova1\").innerHTML = x;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 76","body": "Esempio  \n","html": "<html>\n <body>\n  <h2>\n   Ciclo con l'utilizzo di var\n  </h2>\n  <p>\n   Il valore della variabile i al termine del ciclo è\n  </p>\n  <p id=\"valore_x_var\">\n  </p>\n  <script>\n   var i = 5;       for (var i = 0; i < 10; i++) {         // ...       }       document.getElementById(\"valore_x_var\").innerHTML = i;\n  </script>\n  <hr/>\n  <h2>\n   Ciclo con l'utilizzo di let\n  </h2>\n  <p>\n   Il valore della variabile n al termine del ciclo è\n  </p>\n  <p id=\"valore_x_let\">\n  </p>\n  <script>\n   let n = 5;       for (let n = 0; n < 10; n++) {         // ...       }       document.getElementById(\"valore_x_let\").innerHTML = n;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 78","body": "window object In JavaScript, l'ambito globale è l'ambiente JavaScript. In HTML, l'ambito globale è l'oggetto finestra. Le variabili globali definite con la parola chiave var appartengono all'oggetto finestra.   \n","html": "<html>\n <body>\n  <h2>\n   Variabili globali in JavaScript\n  </h2>\n  <p>\n   In HTML, le variabili globali definite con\n   <b>\n    var\n   </b>\n   , sono      variabili di finestra.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var carName = \"Volvo\";       // in questa parte del codice si può usare window.carName       document.getElementById(\"demo\").innerHTML = \"Casa         automobilistica \" + window.carName;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 79","body": "window object Le variabili globali definite con la parola chiave let non appartengono all'oggetto finestra.   \n","html": "<html>\n <body>\n  <h2>\n   Variabili globali in JavaScript\n  </h2>\n  <p>\n   In HTML, le variabili globali definite con\n   <b>\n    let\n   </b>\n   ,      non sono variabili di finestra.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   let carName = \"Volvo\";       // non è possibile utilizzare window.carName       document.getElementById(\"demo\").innerHTML = \"Casa        automobilistica\" + window.carName;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 80","body": "Hoisting Le variabili definite con var possono essere inizializzate in qualsiasi momento. Possiamo usare la variabile prima che venga dichiarata.   \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Hoisting\n  </h2>\n  <p>\n   Con\n   <b>\n    var\n   </b>\n   , posso utilizzare una variabile prima      che venga dichiarata:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   carName = \"Volvo\";       document.getElementById(\"demo\").innerHTML =        \"Casa automobilistica\" + carName;       var carName;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 82","body": "Esempio   \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Hoisting\n  </h2>\n  <p>\n   Con\n   <b>\n    let\n   </b>\n   , non posso utilizzare una variabile prima che venga      dichiarata:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   try {         carName = \"Volvo\";         let carName;         document.getElementById(\"demo\").innerHTML =          \"Casa automobilistica\" + carName;       }       catch(errore) {         document.getElementById(\"demo\").innerHTML =          errore.name + \": \" + errore.message;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 84","body": "Esempio  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript const\n  </h2>\n  <p>\n   Non è possibile modificare un valore primitivo.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   try {       const PI = 3.141592653589793;       PI = 3.14;     }     catch (errore) {       document.getElementById(\"demo\").innerHTML = errore;     }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 89","body": "const  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript const\n  </h2>\n  <p>\n   La dichiarazione di un oggetto costante NON rende le proprietà      dell'oggetto immutabili:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   // creo un oggetto:       const car = {type:\"Fiat\", model:\"500\", color:\"bianca\"};       // modifico una proprietà:       car.color = \"rossa\";       // aggiungo una proprietà:       car.owner = \"Marco\";       // visualizzo le proprietà:       document.getElementById(\"demo\").innerHTML =       \"Marca \" + car.type + \"; Modello \" + car.model + \";       Colore \" + car.color + \"; Proprietario \" + car.owner;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 90","body": "const Non è possibile riassegnare un valore ad una costante.   \n","html": "<html>\n <body>\n  <h2>\n   JavaScript const\n  </h2>\n  <p>\n   Non è è possibile riassegnare un oggetto costante:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   try {         const car = {type:\"Fiat\", model:\"500\",          color:\"bianca\"};         car = {type:\"Volvo\", model:\"EX60\", color:\"rossa\"};       }       catch (errore) {         document.getElementById(\"demo\").innerHTML = errore;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 91","body": "const È possibile modificare gli elementi di un array costante.   \n","html": "<html>\n <body>\n  <h2>\n   JavaScript const\n  </h2>\n  <p>\n   La dichiarazione di un array costante NON rende gli elementi      immutabili:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   // creo un Array:       const cars = [\"Saab\", \"Volvo\", \"BMW\"];       // modifico il primo elemento:       cars[0] = \"Toyota\";       // aggiungo un elemento:       cars.push(\"Audi\");       // visualizzo l'Array:       document.getElementById(\"demo\").innerHTML = cars;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 92","body": "const Come per le variabili costanti, non è possibile riassegnare un array costante.  <html>   <body>     <h2>JavaScript const</h2>     <p>Non è possibile riassegnare un array costante:</p>     <p id=\"demo\"></p>     <script>       try {         const cars = [\"Saab\", \"Volvo\", \"BMW\"];         cars = [\"Toyota\", \"Volvo\", \"Audi\"];       }       catch (errore) {         document.getElementById(\"demo\").innerHTML = errore;       }     </script>   </body> </html> \n","html": "<html>\n <body>\n  <h2>\n   JavaScript const\n  </h2>\n  <p>\n   Non è possibile riassegnare un array costante:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   try {         const cars = [\"Saab\", \"Volvo\", \"BMW\"];         cars = [\"Toyota\", \"Volvo\", \"Audi\"];       }       catch (errore) {         document.getElementById(\"demo\").innerHTML = errore;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 97","body": "Hoisting  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Hoisting\n  </h2>\n  <p>\n   Con\n   <b>\n    const\n   </b>\n   , non è possibile utilizzare      una variabile prima che venga dichiarata.\n  </p>\n  <p id=\"demo\">\n   testo non modificato\n  </p>\n  <script>\n   carName = \"Volvo\";       const carName;       document.getElementById(\"demo\").innerHTML =        carName;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 125","body": "Funzioni Una funzione è un blocco di codice progettato per eseguire una particolare attività. In JavaScript una funzione viene eseguita quando \"qualcosa\" la invoca (la chiama).   \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Functions\n  </h2>\n  <p>\n   Questo esempio richiama una funzione che esegue un      calcolo e restituisce il risultato:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   function myFunction(p1, p2) {         return p1 * p2;       }       document.getElementById(\"demo\").innerHTML =        myFunction(4, 3);\n  </script>\n </body>\n</html>"},
    {"title": "Slide 134","body": "Variabili locali Poiché le variabili locali vengono riconosciute solo all'interno delle loro funzioni, le variabili con lo stesso nome possono essere utilizzate in funzioni diverse. Le variabili locali vengono create all'avvio di una funzione e cancellate quando la funzione viene completata.  \n","html": "<html>\n <body>\n  <h2>\n   Funzioni JavaScript\n  </h2>\n  <p>\n   Al di fuori di myFunction() carName non è definito.\n  </p>\n  <p id=\"demo1\">\n  </p>\n  <p id=\"demo2\">\n  </p>\n  <script>\n   myFunction();       function myFunction() {         var carName = \"Volvo\";         document.getElementById(\"demo1\").innerHTML = typeof carName +          \" \" + carName;       }       document.getElementById(\"demo2\").innerHTML = typeof carName;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 150","body": "Esempio Nell'esempio seguente, un attributo onclick (con codice) viene aggiunto a un elemento <button>:    Il codice JavaScript modifica il contenuto dell'elemento p con id = \"demo\". \n","html": "<html>\n <body>\n  <button onclick=\"document.getElementById('demo').innerHTML =      Date()\">\n   The time is?\n  </button>\n  <p id=\"demo\">\n  </p>\n </body>\n</html>"},
    {"title": "Slide 151","body": "Esempio In quest'altro esempio, il codice modifica il contenuto del proprio elemento (utilizzando this.innerHTML):   \n","html": "<html>\n <body>\n  <button onclick=\"this.innerHTML =      Date()\">\n   The time is?\n  </button>\n </body>\n</html>"},
    {"title": "Slide 152","body": "Sintassi Il codice JavaScript è spesso lungo diverse righe. È comune vedere gli attributi degli eventi che chiamano funzioni:   \n","html": "<html>\n <body>\n  <p>\n   Clicca il bottone per visualizzare la data.\n  </p>\n  <button onclick=\"displayDate()\">\n   Oggi è?\n  </button>\n  <script>\n   function displayDate() {         document.getElementById(\"demo\").innerHTML =          Date();       }\n  </script>\n  <p id=\"demo\">\n  </p>\n </body>\n</html>"},
    {"title": "Slide 157","body": "lenght Per ricavare la lunghezza di una stringa, bisogna utilizzare la proprietà incorporata length:  \n","html": "<html>\n <body>\n  <h2>\n   Proprietà di String in JavaScript\n  </h2>\n  <p>\n   La proprietà length restituisce la      lunghezza di una stringa:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var testo = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";       var stringLenghtn = testo.length;       document.getElementById(\"demo\").innerHTML =        stringLenghtn;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 178","body": "replace() Il metodo replace() sostituisce un valore specificato con un altro valore in una stringa:   Il metodo replace() non cambia la stringa su cui è chiamato. Restituisce una nuova stringa. \n","html": "<html>\n <body>\n  <h2>\n   JavaScript String Methods\n  </h2>\n  <p>\n   Modifica \"Gramsci\" con \"Buzzi\" nel paragrafo      sottostante:\n  </p>\n  <button onclick=\"myFunction()\">\n   Cliccami\n  </button>\n  <p id=\"demo\">\n   Visita il Gramsci!\n  </p>\n  <script>\n   function myFunction() {         var str = document.getElementById(\"demo\").innerHTML;          var txt = str.replace(\"Gramsci\",\"Buzzi\");         document.getElementById(\"demo\").innerHTML = txt;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 179","body": "replace() Per impostazione predefinita, il metodo replace() sostituisce solo la prima corrispondenza:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript String Methods\n  </h2>\n  <p>\n   Modifica \"Gramsci\" con \"Buzzi\" nel paragrafo      sottostante:\n  </p>\n  <button onclick=\"myFunction()\">\n   Cliccami\n  </button>\n  <p id=\"demo\">\n   Visita il Gramsci ed il Gramsci\n  </p>\n  <script>\n   function myFunction() {         var str = document.getElementById(\"demo\").innerHTML;          var txt = str.replace(\"Gramsci\",\"Buzzi\");         document.getElementById(\"demo\").innerHTML = txt;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 180","body": "replace() Il metodo replace() distingue tra maiuscole e minuscole. La scrittura di GRAMSCI (con lettere maiuscole) non funzionerà. Per sostituire senza distinzione tra maiuscole e minuscole, bisogna utilizzare un'espressione regolare con un flag /i (insensibile):  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript String Methods\n  </h2>\n  <p>\n   Modifica \"Gramsci\" con \"Buzzi\" nel paragrafo      sottostante:\n  </p>\n  <button onclick=\"myFunction()\">\n   Cliccami\n  </button>\n  <p id=\"demo\">\n   Visita il Gramsci!\n  </p>\n  <script>\n   function myFunction() {         var str = document.getElementById(\"demo\").innerHTML;          var txt = str.replace(/GRAMSCI/i, \"Buzzi\");         document.getElementById(\"demo\").innerHTML = txt;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 181","body": "replace() Per sostituire tutte le corrispondenze, si deve utilizzare un'espressione regolare con un flag /g (corrispondenza globale):  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript String Methods\n  </h2>\n  <p>\n   Modifica \"Gramsci\" con \"Buzzi\" nel paragrafo      sottostante:\n  </p>\n  <button onclick=\"myFunction()\">\n   Cliccami\n  </button>\n  <p id=\"demo\">\n   Visita il Gramsci ed il Gramsci!\n  </p>\n  <script>\n   function myFunction() {         var str = document.getElementById(\"demo\").innerHTML;          var txt = str.replace(/Gramsci/g,\"Buzzi\");         document.getElementById(\"demo\").innerHTML = txt;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 182","body": "toUpperCase() e toLowerCase() Una stringa viene convertita in maiuscolo con toUpperCase():   Il metodo toLowerCase() converte una stringa in minuscolo. \n","html": "<html>\n <body>\n  <p>\n   Convertire una string in maiuscolo:\n  </p>\n  <button onclick=\"myFunction()\">\n   Cliccami\n  </button>\n  <p id=\"demo\">\n   Hello World!\n  </p>\n  <script>\n   function myFunction() {         var text =          document.getElementById(\"demo\").innerHTML;         document.getElementById(\"demo\").innerHTML =          text.toUpperCase();       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 183","body": "concat() Il metodo concat() unisce due o più stringhe:   concat() può essere utilizzato al posto dell'operatore più. Scrivere:  var text = \"Hello\" + \" \" + \"World!\"; oppure: var text = \"Hello\".concat(\" \", \"World!\"); restituisce il medesimo risultato \n","html": "<html>\n <body>\n  <h2>\n   JavaScript String Methods\n  </h2>\n  <p>\n   The concat() method joins two or more strings:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var text1 = \"Hello\";       var text2 = \"World!\";       var text3 = text1.concat(\" \",text2);       document.getElementById(\"demo\").innerHTML = text3;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 184","body": "trim() Il metodo trim() rimuove gli spazi bianchi da entrambi i lati di una stringa:  \n","html": "<html>\n <body>\n  <h2>\n   String.trim()\n  </h2>\n  <pcliccare con=\"\" gli=\"\" la=\"\" p=\"\" per=\"\" pulsante=\"\" rimossi.<=\"\" spazi=\"\" stringa=\"\" sul=\"\" visualizzare=\"\" vuoti=\"\">\n   <button onclick=\"myFunction()\">\n    Cliccami\n   </button>\n   <script>\n    function myFunction() {         var str = \"     Hello World!     \";         alert(str.trim());       }\n   </script>\n  </pcliccare>\n </body>\n</html>"},
    {"title": "Slide 185","body": "padStart() e padEnd() ECMAScript 2017 ha aggiunto altri due metodi String: padStart() e padEnd() per supportare il riempimento all'inizio e alla fine di una stringa:   Il primo parametro indica di quanti caratteri dovrà essere composta la stringa, il secondo fornisce il carattere da inserire. Risultato: Il metodo padStart() riempie una stringa con altri caratteri: 0005 0005aaa \n","html": "<html>\n <body>\n  <p>\n   I metodi padStart() e padEnd() riempiono una stringa con altri    caratteri:\n  </p>\n  <p id=\"demo1\">\n  </p>\n  <p id=\"demo2\">\n  </p>\n  <script>\n   let str = \"5\";       str = str.padStart(4,0);       document.getElementById(\"demo1\").innerHTML = str;       str = str.padEnd(7,\"a\");       document.getElementById(\"demo2\").innerHTML = str;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 186","body": "charAt() Il metodo charAt() restituisce il carattere , all'interno di una stringa, attraverso un indice (posizione) specificato:   Risultato: W \n","html": "<html>\n <body>\n  <p>\n   Il metodo charAt() restituisce il carattere di una      data posizione in una stringa:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var str = \"HELLO WORLD\";       document.getElementById(\"demo\").innerHTML =        str.charAt(6);\n  </script>\n </body>\n</html>"},
    {"title": "Slide 187","body": "charCodeAt () Il metodo charCodeAt() restituisce l'unicode del carattere in corrispondenza di un indice specificato in una stringa:   Risultato: 76  Il metodo restituisce un codice UTF-16 (un numero intero compreso tra 0 e 65535). \n","html": "<html>\n <body>\n  <p>\n   Il metodo charCodeAt() restituisce l'unicode del      carattere di una data posizione in una stringa:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var str = \"HELLO WORLD\";       document.getElementById(\"demo\").innerHTML =        str.charCodeAt(2);\n  </script>\n </body>\n</html>"},
    {"title": "Slide 188","body": "split() Una stringa può essere convertita in un array con il metodo split():   Risultato: d \n","html": "<html>\n <body>\n  <p>\n   Clicca su \"Prova\" per visualizzare il primo      elemento dell'array, dopo una divisione di      stringa.\n  </p>\n  <button onclick=\"myFunction()\">\n   Prova\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   function myFunction() {         var str = \"a,b,c,d,e,f\";         var arr = str.split(\",\");         document.getElementById(\"demo\").innerHTML =          arr[3];       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 189","body": "split() Se il separatore è \"\", l'array restituito sarà un array di singoli caratteri:   Risultato: H e l l o \n","html": "<html>\n <body>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var str = \"Hello\";       var arr = str.split(\"\");       var text = \"\";       var i;       for (i = 0; i < arr.length; i++) {         text += arr[i] + \"<br />\"       }       document.getElementById(\"demo\").innerHTML = text;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 198","body": "Stringhe numeriche   Risultato: 1000 10 90 10010  JavaScript utilizza l'operatore + per concatenare le stringhe. \n","html": "<html>\n <body>\n  <script>\n   var x = \"100\";       var y = \"10\";       var z = x * y; // z sarà un numero       document.write(z + \"<br />\");       var z = x / y; // z sarà un numero       document.write(z + \"<br />\");       var z = x - y; // z sarà un numero       document.write(z + \"<br />\");       var z = x + y; // z sarà una stringa       document.write(z);\n  </script>\n </body>\n</html>"},
    {"title": "Slide 199","body": "NaN NaN è una parola riservata in JavaScript che indica che un numero non è un numero legale. Il tentativo di eseguire operazioni aritmetiche con una stringa non numerica restituirà NaN (Not a Number):   Risultato: NaN \n","html": "<html>\n <body>\n  <h2>\n   Numeri\n  </h2>\n  <p>\n   Un numero diviso per una stringa non numerica      restituisce NaN (Not a Number):\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =        100 / \"Apple\";\n  </script>\n </body>\n</html>"},
    {"title": "Slide 200","body": "isNaN() Per scoprire se un valore è un numero è possibile utilizzare la funzione globale isNaN():   Risultato: true \n","html": "<html>\n <body>\n  <h2>\n   Numberi\n  </h2>\n  <p>\n   È possibile utilizzare la funzione globale      isNaN() per scoprire se un valore è un numero:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var x = 100 / \"Apple\";       document.getElementById(\"demo\").innerHTML =       isNaN(x);\n  </script>\n </body>\n</html>"},
    {"title": "Slide 202","body": "Infinity Infinity (o -Infinity) è il valore restituito da JavaScript se si calcola un numero al di fuori del numero più grande possibile.  \n","html": "<html>\n <body>\n  <h2>\n   Numberi\n  </h2>\n  <p>\n   Infinity viene restituito se si calcola un numero al      di fuori del numero più grande possibile:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var myNumber = 2;        var txt = \"\";       while (myNumber != Infinity) {         myNumber = myNumber * myNumber;         txt = txt + myNumber + \"<br />\";       }       document.getElementById(\"demo\").innerHTML = txt;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 214","body": "Number() Il metodo Number() può essere utilizzato per convertire le variabili in numeri:   Se il numero non può essere convertito, viene restituito NaN (Not a Number). \n","html": "<html>\n <body>\n  <h2>\n   Metodi Globali JavaScript\n  </h2>\n  <p>\n   Il metodo Number() converte le variabili in numeri:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =          Number(true) + \"<br />\" +         Number(false) + \"<br />\" +         Number(\"10\") + \"<br />\" +          Number(\"  10\") + \"<br />\" +         Number(\"10  \") + \"<br />\" +         Number(\" 10  \") + \"<br />\" +         Number(\"10.33\") + \"<br />\" +          Number(\"10,33\") + \"<br />\" +         Number(\"10 33\") + \"<br />\" +         Number(\"Marco\");\n  </script>\n </body>\n</html>"},
    {"title": "Slide 215","body": "Number() utilizzato nelle date Il metodo Number() può anche convertire una data in un numero:   Risultato: 1616371200000  Restituisce il numero di millisecondi dall'1.1.1970. \n","html": "<html>\n <body>\n  <h2>\n   Metodi Globali JavaScript\n  </h2>\n  <p>\n   Il metodo Number() converte una data in un      numero:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var x = new Date(\"2017-09-30\");       document.getElementById(\"demo\").innerHTML =        Number(x);\n  </script>\n </body>\n</html>"},
    {"title": "Slide 216","body": "parseInt() Il metodo parseInt() analizza una stringa e restituisce un numero intero. Gli spazi sono consentiti e viene restituito solo il primo numero:   Se il numero non può essere convertito, viene restituito NaN. \n","html": "<html>\n <body>\n  <h2>\n   Metodi Globali JavaScript\n  </h2>\n  <p>\n   La funzione globale parseInt() converte le stringhe in      numeri:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =          parseInt(\"10\") + \"<br />\" +         parseInt(\"10.33\") + \"<br />\" +         parseInt(\"10 6\") + \"<br />\" +           parseInt(\"10 anni\") + \"<br />\" +           parseInt(\"anni 10\");\n  </script>\n </body>\n</html>"},
    {"title": "Slide 217","body": "parseFloat() Il metodo parseFloat() analizza una stringa e restituisce un numero in virgola mobile. Gli spazi sono consentiti e viene restituito solo il primo numero:   Se il numero non può essere convertito, viene restituito NaN. \n","html": "<html>\n <body>\n  <h2>\n   Metodi Globali JavaScript\n  </h2>\n  <p>\n   La funzione globale parseFloat() converte le stringhe      in numeri:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =          parseFloat(\"10\") + \"<br />\" +         parseFloat(\"10.33\") + \"<br />\" +         parseFloat(\"10 6\") + \"<br />\" +           parseFloat(\"10 anni\") + \"<br />\" +           parseFloat(\"anni 10\");\n  </script>\n </body>\n</html>"},
    {"title": "Slide 221","body": "NaN NaN è una parola riservata a JavaScript la quale indica che un numero non è un numero legale. Il tentativo di eseguire operazioni aritmetiche con una stringa non numerica risulterà NaN (Not a Number):   Risultato: NaN \n","html": "<html>\n <body>\n  <h2>\n   Numeri\n  </h2>\n  <p>\n   Un numero diviso per una stringa non numerica      restituirà NaN (Not a Number):\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =        100 / \"Patate\";\n  </script>\n </body>\n</html>"},
    {"title": "Slide 233","body": "Ciclo for Il modo più sicuro per scorrere un array è usare un ciclo for:  \n","html": "<html>\n <body>\n  <h2>\n   Array\n  </h2>\n  <p>\n   Il modo migliore per scorrere un array è utilizzare un     ciclo for:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var frutti, text, fLen, i;       frutti = [\"Banana\", \"Arancia\", \"Mela\", \"Mango\"];       fLen = frutti.length;       text = \"<ul>\";       for (i = 0; i < fLen; i++) {         text += \"<li>\" + frutti[i] + \"</li>\";       }       text += \"</ul>\";       document.getElementById(\"demo\").innerHTML = text;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 234","body": "forEach() Per scorrere un array è possibile utilizzare la funzione forEach():  \n","html": "<html>\n <body>\n  <h2>\n   Array\n  </h2>\n  <p>\n   Array.forEach() chiama una funzione per ogni elemento      dell'array.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var frutti, text;       frutti = [\"Banana\", \"Arancia\", \"Mela\", \"Mango\"];       text = \"<ol>\";       frutti.forEach(myFunction);       text += \"</ol>\";       document.getElementById(\"demo\").innerHTML = text;       function myFunction(elemento) {         text += \"<li>\" + elemento + \"</li>\";       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 235","body": "Aggiungere un nuovo elemento Il metodo push() è modo più semplice per aggiungere un nuovo elemento a un array:  \n","html": "<html>\n <body>\n  <h2>\n   Array\n  </h2>\n  <p>\n   Il metodo push aggiunge un nuovo elemento a un     array.\n  </p>\n  <button onclick=\"myFunction()\">\n   Prova\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var frutti = [\"Banana\", \"Arancia\", \"Mela\", \"Mango\"];       document.getElementById(\"demo\").innerHTML = frutti;       function myFunction() {         frutti.push(\"Pera\");         document.getElementById(\"demo\").innerHTML = frutti;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 237","body": "Aggiungere un nuovo elemento L'aggiunta di elementi con indici alti può creare \"buchi\" non definiti in un array:  \n","html": "<html>\n <body>\n  <h2>\n   Array\n  </h2>\n  <p>\n   L'aggiunta di elementi con indici alti può creare     \"buchi\" indefiniti in un array.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var frutti, text, fLen, i;       frutti = [\"Banana\", \"Arancia\", \"mela\", \"Mango\"];       frutti[6] = \"Pera\";       fLen = frutti.length;       text = \"\";       for (i = 0; i < fLen; i++) {         text += frutti[i] + \"<br />\";       }       document.getElementById(\"demo\").innerHTML = text;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 253","body": "splice()  \n","html": "<html>\n <body>\n  <h2>\n   splice()\n  </h2>\n  <p>\n   Il metodo splice() aggiunge nuovi elementi all'array e, qualora ci fossero, restituisce un array con gli elementi eliminati.\n  </p>\n  <button onclick=\"myFunction()\">\n   Prova\n  </button>\n  <p id=\"demo1\">\n  </p>\n  <p id=\"demo2\">\n  </p>\n  <p id=\"demo3\">\n  </p>\n  <script>\n   var frutti = [\"Banana\", \"Arancia\", \"Mela\", \"Mango\"];       document.getElementById(\"demo1\").innerHTML =        \"Array originale:<br /> \" + frutti;       function myFunction() {         var removed = frutti.splice(2, 2, \"Pera\", \"Uva\");          document.getElementById(\"demo2\").innerHTML =          \"Nuovo Array:<br />\" + frutti;         document.getElementById(\"demo3\").innerHTML =          \"Elementi rimosso:<br /> \" + removed;        }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 259","body": "sort() Il metodo sort() ordina alfabeticamente un array:  \n","html": "<html>\n <body>\n  <h2>\n   Ordinamento array\n  </h2>\n  <p>\n   Il metodo sort() ordina un array in ordine      alfabetico.\n  </p>\n  <button onclick=\"myFunction()\">\n   Prova\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var frutti = [\"Banana\", \"Arancia\", \"Mela\", \"Mango\"];       document.getElementById(\"demo\").innerHTML = frutti;       function myFunction() {         frutti.sort();         document.getElementById(\"demo\").innerHTML = frutti;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 260","body": "reverse() Il metodo reverse() inverte gli elementi in un array. Si può utilizzare per ordinare un array in ordine decrescente:  \n","html": "<html>\n <body>\n  <h2>\n   Ordine inverso degli array\n  </h2>\n  <p>\n   Il metodo reverse () inverte gli elementi in un array.\n  </p>\n  <p>\n   Combinando sort() e reverse() ordiniamo un array in ordine decrescente.\n  </p>\n  <button onclick=\"myFunction()\">\n   Prova\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   // Crea e visualizza un array:         var frutti = [\"Banana\", \"Arancia\", \"Mela\", \"Mango\"];         document.getElementById(\"demo\").innerHTML = frutti;         function myFunction() {           // Ordina l'array           frutti.sort();           // Inverte l'ordine degli elementi:           frutti.reverse();           document.getElementById(\"demo\").innerHTML = frutti;         }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 262","body": "Ordinamento numerico Possiamo effettuare un ordinamento numerico usando una funzione di confronto:  \n","html": "<html>\n <body>\n  <h2>\n   Ordinamento array\n  </h2>\n  <p>\n   Clicca sul pulsante per ordinare la matrice in ordine      crescente.\n  </p>\n  <button onclick=\"myFunction()\">\n   Prova\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var punti = [40, 100, 1, 5, 25, 10];       document.getElementById(\"demo\").innerHTML = punti;         function myFunction() {         punti.sort(           function(a, b){return a - b}         );         document.getElementById(\"demo\").innerHTML = punti;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 263","body": "Ordinamento numerico Allo stesso modo possiamo effettuare un ordinamento decrescente:  \n","html": "<html>\n <body>\n  <h2>\n   Ordinamento array\n  </h2>\n  <p>\n   Clicca sul pulsante per ordinare la matrice in ordine      decrescente.\n  </p>\n  <button onclick=\"myFunction()\">\n   Prova\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var punti = [40, 100, 1, 5, 25, 10];       document.getElementById(\"demo\").innerHTML = punti;         function myFunction() {         punti.sort(           function(a, b){return b - a}         );         document.getElementById(\"demo\").innerHTML = punti;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 266","body": "Esempio Questo frammento di codice effettua l'ordinamento numerico o alfabetico:  \n","html": "<html>\n <body>\n  <h2>\n   Ordinamento array\n  </h2>\n  <p>\n   Cliccare sui pulsanti per ordinare la matrice alfabeticamente o      numericamente.\n  </p>\n  <button onclick=\"myFunction1()\">\n   Ordinamento alfabetico\n  </button>\n  <button onclick=\"myFunction2()\">\n   Ordinamento numerico\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var punti = [40, 100, 1, 5, 25, 10];       document.getElementById(\"demo\").innerHTML = punti;         function myFunction1() {         punti.sort();         document.getElementById(\"demo\").innerHTML = punti;       }       function myFunction2() {         punti.sort(function(a, b){return a - b});         document.getElementById(\"demo\").innerHTML = punti;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 268","body": "Esempio  \n","html": "<html>\n <body>\n  <h2>\n   Il metodo Fisher Yates\n   <p>\n    Clicca il pulsante per ordinare l'array in ordine casuale.\n   </p>\n   <button onclick=\"myFunction()\">\n    Prova\n   </button>\n   <p id=\"demo\">\n   </p>\n   <script>\n    var punti = [40, 100, 1, 5, 25, 10];       document.getElementById(\"demo\").innerHTML = punti;         function myFunction() {         var i, j, k;         for (i = punti.length -1; i > 0; i--) {           j = Math.floor(Math.random() * i)           k = punti[i]           punti[i] = punti[j]           punti[j] = k         }         document.getElementById(\"demo\").innerHTML = punti;       }\n   </script>\n  </h2>\n </body>\n</html>"},
    {"title": "Slide 270","body": "Math.max.apply È possibile usare Math.max.apply per trovare il numero più alto in un array:  \n","html": "<html>\n <body>\n  <h2>\n   Valore massimo\n  </h2>\n  <p>\n   Il numero più alto è:\n   <spanid=\"demo\">\n    .\n   </spanid=\"demo\">\n  </p>\n  <script>\n   var punti = [40, 100, 1, 5, 25, 10];       document.getElementById(\"demo\").innerHTML =               myArrayMax(punti);         function myArrayMax(arr) {         return Math.max.apply(null, arr);       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 271","body": "Math.min.apply Allo stesso modo è possibile usare Math.min.apply per trovare il numero più basso in un array:  \n","html": "<html>\n <body>\n  <h2>\n   Valore minimo\n  </h2>\n  <p>\n   Il numero più basso è:\n   <span id=\"demo\">\n   </span>\n   .\n  </p>\n  <script>\n   var punti = [40, 100, 1, 5, 25, 10];       document.getElementById(\"demo\").innerHTML =               myArrayMin(punti);         function myArrayMin(arr) {         return Math.min.apply(null, arr);       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 274","body": "Trova massimo e trova minimo  \n","html": "<html>\n <body>\n  <h2>\n   Valore massimo e valore minimo\n  </h2>\n  <p>\n   Il valore minimo è:\n   <span id=\"demo1\">\n   </span>\n   .\n  </p>\n  <p>\n   Il valore massimo è:\n   <span id=\"demo2\">\n   </span>\n   .\n  </p>\n  <script>\n   var punti = [40, 100, 1, 5, 25, 10];       document.getElementById(\"demo1\").innerHTML =             trovaMinimo(punti);       function trovaMinimo(arr) {         var lunghezza = arr.length;         var minimo = Infinity;         while (lunghezza--) {           if (arr[lunghezza] < minimo) {           minimo = arr[lunghezza];           }         }       return minimo;       }       document.getElementById(\"demo2\").innerHTML =        trovaMassimo(punti);       function trovaMassimo(arr) {         var lunghezza = arr.length;         var massimo = -Infinity;         while (lunghezza--) {           if (arr[lunghezza] > massimo) {             massimo = arr[lunghezza];           }         }       return massimo;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 276","body": "Ordinare gli oggetti  \n","html": "<html>\n <body>\n  <h2>\n   Ordinamento Array di oggetti\n  </h2>\n  <p>\n   Clicca il pulsante per ordinare gli oggetti in base all'anno.\n  </p>\n  <button onclick=\"myFunction()\">\n   Ordina\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var cars = [         {tipo:\"Volvo\", anno:2016},         {tipo:\"Saab\", anno:2001},         {tipo:\"BMW\", anno:2010}       ];       displayCars();       function myFunction() {         cars.sort(function(a, b){return a.anno - b.anno});         displayCars();       }       function displayCars() {         document.getElementById(\"demo\").innerHTML =         cars[0].tipo + \" \" + cars[0].anno + \"<br />\" +         cars[1].tipo + \" \" + cars[1].anno + \"<br />\" +         cars[2].tipo + \" \" + cars[2].anno;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 277","body": "Ordinare gli oggetti Il confronto delle proprietà delle stringhe è più complesso:  \n","html": "<html>\n <body>\n  <h2>\n   Ordinamento Array di oggetti\n  </h2>\n  <p>\n   Cliccare il pulsante per ordinare gli oggetti in base al tipo.\n  </p>\n  <button onclick=\"myFunction()\">\n   Ordina\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var cars = [         {tipo:\"Volvo\", anno:2016},         {tipo:\"Saab\", anno:2001},         {tipo:\"BMW\", anno:2010}       ];       displayCars();       function myFunction() {         cars.sort(function(a, b){           var x = a.tipo.toLowerCase();           var y = b.tipo.toLowerCase();           if (x < y) {return -1;}           if (x > y) {return 1;}           return 0;         });         displayCars();       }       function displayCars() {         document.getElementById(\"demo\").innerHTML =         cars[0].tipo + \" \" + cars[0].anno + \"<br />\" +         cars[1].tipo + \" \" + cars[1].anno + \"<br />\" +         cars[2].tipo + \" \" + cars[2].anno;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 279","body": "Array.forEach() Il metodo forEach() chiama una funzione (una funzione di callback) una volta per ogni elemento dell'array.   Nota che la funzione accetta 3 argomenti: Il valore dell'elemento L'indice degli elementi La matrice stessa  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Array.forEach()\n  </h2>\n  <p>\n   Chiama una funzione una volta per ogni elemento      dell'array.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var txt = \"\";       var numbers = [45, 4, 9, 16, 25];       numbers.forEach(myFunction);       document.getElementById(\"demo\").innerHTML = txt;       function myFunction(value, index, array) {         txt = txt + value + \"<br />\";        }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 282","body": "Array.map() Questo esempio moltiplica ogni valore della matrice per 2:   Quando una funzione di callback utilizza solo il parametro value, i parametri index e array possono essere omessi. \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Array.map()\n  </h2>\n  <p>\n   Crea un nuovo array eseguendo una funzione su ogni elemento      dell'array.\n  </p>\n  <p>\n   La matrice di partenza è:\n   <span id=\"demo1\">\n   </span>\n   .\n  </p>\n  <p>\n   Matrice con valori doppi:\n   <span id=\"demo2\">\n   </span>\n   .\n  </p>\n  <script>\n   var numbers1 = [45, 4, 9, 16, 25];       document.getElementById(\"demo1\").innerHTML = numbers1;       var numbers2 = numbers1.map(myFunction);       document.getElementById(\"demo2\").innerHTML = numbers2;       function myFunction(value, index, array) {         return value * 2;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 283","body": "Array.filter() Il metodo filter() crea un nuovo array con gli elementi dell'array che superano un dato valore. Questo esempio crea un nuovo array formato dagli elementi che hanno un valore maggiore di 18:   Anche in questo caso index ed array possono essere omessi. \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Array.filter()\n  </h2>\n  <p>\n   Crea un nuovo array con tutti gli elementi che      superano un test.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var numbers = [45, 4, 9, 16, 25];       var over18 = numbers.filter(myFunction);       document.getElementById(\"demo\").innerHTML = over18;       function myFunction(value, index, array) {         return value > 18;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 284","body": "Array.reduce() Il metodo reduce() esegue una funzione su ogni elemento dell'array per produrre (ridurlo a) un singolo valore, non modificando l'array originale. Il metodo reduce() scorre l'array da sinistra a destra. Questo esempio trova la somma di tutti i numeri in un array:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Array.reduce()\n  </h2>\n  <p>\n   Questo esempio effettua la somma di tutti i valori di      un array:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var numbers = [45, 4, 9, 16, 25];       var somma = numbers.reduce(myFunction);       document.getElementById(\"demo\").innerHTML =        \"La somma è \" + somma;       function myFunction(total, value, index, array) {         return total + value;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 288","body": "Array.every() Il metodo every() controlla se tutti i valori dell'array superano un test. Questo esempio controlla se tutti i valori dell'array sono maggiori di 18:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Array.every()\n  </h2>\n  <p>\n   Il metodo every() controlla se tutti i valori      dell'array superano un test.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var numbers = [45, 4, 9, 16, 25];       var allOver18 = numbers.every(myFunction);       document.getElementById(\"demo\").innerHTML =        \"Tutti maggiori di 18 è \" + allOver18;       function myFunction(value, index, array) {         return value > 18;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 290","body": "Array.some() Il metodo some() controlla se alcuni valori dell'array superano un test. Questo esempio controlla se alcuni valori dell'array sono maggiori di 18:   Anche in questo caso La funzione accetta 3 argomenti: Il valore dell'elemento L'indice degli elementi La matrice stessa \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Array.some()\n  </h2>\n  <p>\n   Il metodo some() controlla se alcuni valori      dell'array superano un test.\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var numbers = [45, 4, 9, 16, 25];       var someOver18 = numbers.some(myFunction);       document.getElementById(\"demo\").innerHTML =        \"Alcuni valori maggiori di 18 è \" + someOver18;       function myFunction(value, index, array) {         return value > 18;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 291","body": "Array.indexOf() Il metodo indexOf() cerca un elemento per valore e ne restituisce la posizione.  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Array.indexOf()\n  </h2>\n  <p id=\"d\">\n  </p>\n  <script>\n   var frutti =        [\"Mela\", \"Arancia\", \"Mela\", \"Mango\"];       var a = frutti.indexOf(\"Mela\");       document.getElementById(\"d\").innerHTML =       \"Mela si trova nella posizione \" + a;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 294","body": "Array.find() Il metodo find() restituisce il valore del primo elemento dell'array che supera una funzione di test. Questo esempio trova il primo elemento maggiore di 18:   \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Array.find()\n  </h2>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var numbers = [4, 9, 16, 25, 29];       var first = numbers.find(myFunction);       document.getElementById(\"demo\").innerHTML =        \"Il primo valore maggiore di 18 è \" + first;       function myFunction(value, index, array) {         return value > 18;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 296","body": "Array.findIndex() Il metodo findIndex() restituisce l'indice del primo elemento dell'array che supera una funzione di test. Questo esempio trova l'indice del primo elemento maggiore di 18:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Array.findIndex()\n  </h2>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var numbers = [4, 9, 16, 25, 29];       var first = numbers.findIndex(myFunction);       document.getElementById(\"demo\").innerHTML =        \"Il primo valore maggiore di 18 ha indice \" +       first;       function myFunction(value, index, array) {         return value > 18;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 322","body": "getTime() Il metodo getTime() restituisce il numero di millisecondi dal 1 gennaio 1970:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript getTime()\n  </h2>\n  <p>\n   In JavaScript l'orologio interno conta dalla      mezzanotte dell'1 gennaio 1970.\n  </p>\n  <p>\n   La funzione getTime() restituisce il numero di      millisecondi da allora:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var d = new Date();       document.getElementById(\"demo\").innerHTML =        d.getTime();\n  </script>\n </body>\n</html>"},
    {"title": "Slide 331","body": "setFullYear() Il metodo setFullYear() imposta l'anno di un oggetto data:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript setFullYear()\n  </h2>\n  <p>\n   Il metodo setFullYear() imposta      l'anno di un oggetto data:\n  </p>\n  <script>\n   var d = new Date();       d.setFullYear(1975);       document.write( d );\n  </script>\n </body>\n</html>"},
    {"title": "Slide 332","body": "setFullYear() Il metodo setFullYear() può opzionalmente impostare mese e giorno:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript setFullYear()\n  </h2>\n  <p>\n   Il metodo setFullYear() può      opzionalmente impostare mese e giorno.\n  </p>\n  <p>\n   Notare che i mesi partono da 0. Decembre      corrisponde ad 11:\n  </p>\n  <script>\n   var d = new Date();       d.setFullYear(2001, 8, 24);       document.write( d );\n  </script>\n </body>\n</html>"},
    {"title": "Slide 341","body": "Math.round() Math.round(x) restituisce il numero intero più vicino:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.round()\n  </h2>\n  <p>\n   Math.round(x) restituisce il valore di x      arrotondato al numero intero più vicino:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =        Math.round(4.4); //restiutisce 5\n  </script>\n </body>\n</html>"},
    {"title": "Slide 342","body": "Math.round() Math.ceil(x) restituisce il valore di x arrotondato fino al suo intero più vicino:   \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.ceil()\n  </h2>\n  <p>\n   Math.ceil(x) restituisce il valore di x      arrotondato al primo numero intero più grande:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =        Math.ceil(4.4); //restiutisce 5\n  </script>\n </body>\n</html>"},
    {"title": "Slide 343","body": "Math.floor() Math.floor(x) restituisce il valore di x arrotondato per difetto al numero intero più vicino:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.floor()\n  </h2>\n  <p>\n   Math.floor(x) restituisce il valore di x      arrotondato per difetto:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =        Math.floor(4.9); //restiutisce 4\n  </script>\n </body>\n</html>"},
    {"title": "Slide 344","body": "Math.trunc() Math.trunc(x) restituisce la parte intera di x:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.trunc()\n  </h2>\n  <p>\n   Math.trunc(x) restituisce la parte      intera di x:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =        Math.trinc(-4.9); //restiutisce -4\n  </script>\n </body>\n</html>"},
    {"title": "Slide 345","body": "Math.sign() Math.trunc(x) restituisce 1 se x è positivo, 0 se x è nullo e -1 se x è negativo:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.sign()\n  </h2>\n  <p>\n   Math.sign(x) restituisce se x è positivo,      nullo o negativo:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =        Math.sign(-4); //restiutisce -1\n  </script>\n </body>\n</html>"},
    {"title": "Slide 346","body": "Math.pow() Math.pow(x, y) restituisce il valore di x elevato a y:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.pow()\n  </h2>\n  <p>\n   Math.pow(x,y) restituisce il valore di x      elevato ad y:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =           Math.pow(8,2); //restiutisce 64\n  </script>\n </body>\n</html>"},
    {"title": "Slide 347","body": "Math.sqrt() Math.sqrt(x) restituisce la radice quadrata di x:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.sqert()\n  </h2>\n  <p>\n   Math.sqrt(x,) restituisce la radice quadrata      di x:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =            Math.sqrt(64); //restiutisce 8\n  </script>\n </body>\n</html>"},
    {"title": "Slide 348","body": "Math.abs() Math.abs(x) restituisce il valore assoluto di x:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.abs()\n  </h2>\n  <p>\n   Math.abs(x,) restituisce il valore assoluto      di x:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =            Math.abs(-4,4); //restiutisce 4,4\n  </script>\n </body>\n</html>"},
    {"title": "Slide 349","body": "Math.sin() Math.sin(x) restituisce il seno dell'angolo x (espresso in radianti):  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.sin()\n  </h2>\n  <p>\n   Math.sin(x,) restituisce il seno di x      (espresso in radianti). Per utilizzare i gradi      basta moltiplicare per Pi greco e dividere per      180:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =            \"Il valore del seno di 90 gradi è\" +        Math.sin(90 * Math.PI/180); //restiutisce 1\n  </script>\n </body>\n</html>"},
    {"title": "Slide 350","body": "Math.cos() Math.cos(x) restituisce il coseno dell'angolo x (espresso in radianti):  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.cos()\n  </h2>\n  <p>\n   Math.cos(x,) restituisce il coseno di x      (espresso in radianti). Per utilizzare i gradi      basta moltiplicare per Pi greco e dividere per      180:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =            \"Il valore del coseno di 180 gradi è\" +        Math.sin(180 * Math.PI/180); //restiutisce -1\n  </script>\n </body>\n</html>"},
    {"title": "Slide 351","body": "Math.min() e Math.max() Math.min() e Math.max() possono essere utilizzati per trovare il valore minimo o massimo in un elenco di argomenti:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.min() e Math.max()\n  </h2>\n  <p>\n   Math.min() restituisce il valore minimo in una lista      di argomenti:\n  </p>\n  <p id=\"demo1\">\n  </p>\n  <hr/>\n  <p>\n   Math.max() restituisce il valore massimo in una lista      di argomenti:\n  </p>\n  <p id=\"demo2\">\n  </p>\n  <script>\n   document.getElementById(\"demo1\").innerHTML =       Math.min(0, 150, 30, 20, -8, -200); //restituisce -200       document.getElementById(\"demo2\").innerHTML =       Math.max(0, 150, 30, 20, -8, -200); //restituisce 150\n  </script>\n </body>\n</html>"},
    {"title": "Slide 352","body": "Math.random() Math.random() restituisce un numero casuale compreso tra 0 (incluso) e 1 (escluso):    \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.random()\n  </h2>\n  <p>\n   Math.random() restituisce un numero casuale      compreso tra 0 e 1:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =              Math.random();\n  </script>\n </body>\n</html>"},
    {"title": "Slide 353","body": "Math.log(x) Math.log(x) restituisce il logaritmo naturale di x:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.log()\n  </h2>\n  <p>\n   Math.log() restituisce il logaritmo      naturale di un numero:\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =        Math.log(1); //restituisce 0\n  </script>\n </body>\n</html>"},
    {"title": "Slide 354","body": "Math.log2(x) Math.log2(x) restituisce il logaritmo in base 2 di x:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.log2()\n  </h2>\n  <p>\n   Math.log2() restituisce il logaritmo in      base 2 di un numero.\n  </p>\n  <p>\n   Quante volte dobbiamo moltiplicare 2 per      ottenere 8?\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =            Math.log2(8); //restituisce 3\n  </script>\n </body>\n</html>"},
    {"title": "Slide 355","body": "Math.log10(x) Math.log10(x) restituisce il logaritmo in base 10 di x:  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.log10()\n  </h2>\n  <p>\n   Math.log10() restituisce il logaritmo in      base 10 di un numero.\n  </p>\n  <p>\n   Quante volte dobbiamo moltiplicare 10 per      ottenere 10000?\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =            Math.log10(10000); //restituisce 4\n  </script>\n </body>\n</html>"},
    {"title": "Slide 359","body": "Math.random() Come già visto Math.random() restituisce un numero casuale compreso tra 0 (incluso) e 1 (escluso), quindi restituisce sempre un numero inferiore a 1. Combinato con Math.floor() può essere utilizzato per restituire numeri interi casuali.  \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.random()\n  </h2>\n  <p>\n   Math.floor(Math.random() * 10) restituisce un         numero intero casuale compreso tra 0 e 9       (inclusi):\n  </p>\n  <p id=\"demo\">\n  </p>\n  <script>\n   document.getElementById(\"demo\").innerHTML =       Math.floor(Math.random() * 10);\n  </script>\n </body>\n</html>"},
    {"title": "Slide 361","body": "Funzione per generare numeri casuali Come abbiamo visto dagli esempi precedenti, potrebbe essere una buona idea creare una funzione appropriata da utilizzare per ottenere dei numeri interi casuali compresi tra min (incluso) e max (escluso):   Per includere tra i numeri generati anche max basta far restituire alla funzione il valore di Math.floor(Math.random() * (max  min +1 )) + min; \n","html": "<html>\n <body>\n  <h2>\n   JavaScript Math.random()\n  </h2>\n  <p>\n   Ogni volta che clicchi sul pulsante, la funzione      getRndInteger(min, max) restituisce un numero casuale      compreso tra 0 e 9 (entrambi inclusi):\n  </p>\n  <button onclick=\"document.getElementById('demo').innerHTML =            getRndInteger(0,10)\">\n   Cliccami\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   function getRndInteger(min, max) {         return Math.floor(Math.random() * (max - min)) + min;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 363","body": "Boolean() Possiamo usare la funzione Boolean() per scoprire se un'espressione (o una variabile) è vera:   Avremo lo stesso risultato anche scrivendo: document.getElementById(\"demo\").innerHTML = 10 > 9; \n","html": "<html>\n <body>\n  <p>\n   Visualizza il valore di Boolean(10 &gt; 9):\n  </p>\n  <button onclick=\"myFunction()\">\n   Cliccami\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   function myFunction() {         document.getElementById(\"demo\").innerHTML =            Boolean(10 > 9); //restituisce true       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 364","body": "Boolean() Tutto ciò che ha un \"valore\" è vero:  \n","html": "<html>\n <body>\n  <script>\n   var b1 = Boolean(100);       var b2 = Boolean(3.14);       var b3 = Boolean(-15);       var b4 = Boolean(\"Hello\");       var b5 = Boolean('false');       var b6 = Boolean(1 + 7 + 3.14);       document.write(         \"100 è \" + b1 + \"<br />\" +         \"3.14 è \" + b2 + \"<br />\" +         \"-15 è \" + b3 + \"<br />\" +         \"Qualsiasi stringa (non vuota) è \" + b4 + \"<br />\" +         \"Anche la stringa 'false' è \" + b5 + \"<br />\" +         \"Qualsiasi espressione (tranne zero) è \" + b6 );\n  </script>\n </body>\n</html>"},
    {"title": "Slide 365","body": "Boolean() Tutto ciò che privo di un \"valore\" è falso:  \n","html": "<html>\n <body>\n  <script>\n   var b1 = Boolean(0);       var b2 = Boolean(-0);       var b3 = Boolean(\"\");       var b4 = Boolean(b4);       var b5 = Boolean(null);       var b6 = Boolean(false);       var b7 = Boolean(NaN);       document.write(         \"0 è\" + b1 + \"<br />\" +         \"-0 è \" + b2 + \"<br />\" +         \"Una stringa vuota è \" + b3 + \"<br />\" +         \"Un valore non definito è \" + b4 + \"<br />\" +         \"null è \" + b5 + \"<br />\" +         \"false è \" + b6 + \"<br />\" +          \"NaN è \" +b7);\n  </script>\n </body>\n</html>"},
    {"title": "Slide 367","body": "Booleani come oggetti   Creare oggetti booleani rallenta la velocità di esecuzione. La  parola chiave new complica il codice. \n","html": "<html>\n <body>\n  <p>\n   Non creare mai booleani come oggetti.\n  </p>\n  <p>\n   Booleani e oggetti non possono essere      confrontati in modo sicuro.\n  </p>\n  <script>\n   var x = false;              // x è un booleano       var y = new Boolean(false); // y è un oggetto       document.write(\"x è di tipo \" +  typeof x +        \"<br />\" + \"y è di tipo \" + typeof y );\n  </script>\n </body>\n</html>"},
    {"title": "Slide 370","body": "Operatori di confronto Gli operatori di confronto vengono utilizzati nelle istruzioni logiche per determinare l'uguaglianza o la differenza tra variabili o valori.  \n","html": "<html>\n <body>\n  <h2>\n   Confronti JavaScript\n  </h2>\n  <p>\n   Assegna 5 a x e visualizza il valore del      confronto:\n  </p>\n  <script>\n   var x = 5;       document.write( \"(x == 8) \" + (x == 8) + \"<br />\" );       document.write( \"(x == 5) \" + (x == 5) + \"<br />\" );       document.write( \"(x == '5') \" + (x == \"5\") );\n  </script>\n </body>\n</html>"},
    {"title": "Slide 371","body": "Operatori di confronto Gli operatori di confronto vengono utilizzati nelle istruzioni logiche per determinare l'uguaglianza o la differenza tra variabili o valori. Assegnamo 5 alla variabile x e visualizziamo il valore dei vari confronti:  \n","html": "<html>\n <body>\n  <h2>\n   Confronti JavaScript\n  </h2>\n  <p>\n   Assegnato 5 ad x visualizziamo il valore del confronto:\n  </p>\n  <script>\n   var x = 5;       document.write( \"(x == 8) \" + (x == 8) + \"<br />\" );       document.write( \"(x == 5) \" + (x == 5) + \"<br />\" );       document.write( \"(x == '5') \" + (x == \"5\") + \"<br />\" );       document.write( \"(x === 5) \" + (x === 5) + \"<br />\" );       document.write( \"(x === '5') \" + (x === \"5\") + \"<br />\" );       document.write( \"(x != 8) \" + (x != 8) + \"<br />\" );       document.write( \"(x !== 5) \" + (x !== 5) + \"<br />\" );       document.write( \"(x !== '5') \" + (x !== \"5\") + \"<br />\" );       document.write( \"(x !== 8) \" + (x !== 8) + \"<br />\" );       document.write( \"(x x > 8) \" + (x > 8) + \"<br />\" );       document.write( \"(x x < 8) \" + (x < 8) + \"<br />\" );       document.write( \"(x >= 8) \" + (x >= 8) + \"<br />\" );       document.write( \"(x <= 8) \" + (x <= 8) + \"<br />\" );\n  </script>\n </body>\n</html>"},
    {"title": "Slide 373","body": "Operatori logici Gli operatori logici vengono utilizzati per determinare la logica tra variabili o valori. Assegniamo a x = 6 e y = 3, il seguente codice spiega gli operatori logici:  \n","html": "<html>\n <body>\n  <h2>\n   Confronti JavaScript\n  </h2>\n  <p>\n   <hr/>\n   L'operatore AND (&amp;&amp;) restituisce true se entrambe le espressioni sono vere,      altrimenti restituisce false.\n  </p>\n  <p id=\"demoAND\">\n   <p>\n    <p>\n     L'operatore OR (||) restituisce true se una o entrambe le espressioni sono vere,      altrimenti restituisce false.\n    </p>\n    <p id=\"demoOR\">\n     <p>\n      <p>\n       L'operatore NOT (!) restituisce true per affermazioni false e false per affermazioni      vere.\n      </p>\n      <p id=\"demoNOT\">\n       <p>\n        <script>\n         var x = 6;       var y = 3;       document.getElementById(\"demoAND\").innerHTML =         \"x<10 e y>1 \" + (x < 10 && y > 1) + \"<br />\" +          \"x<10 e y<1 \" + (x < 10 && y < 1) + \"<hr />\";       document.getElementById(\"demoOR\").innerHTML =         \"x=5 o y=5 \" + (x == 5 || y == 5) + \"<br />\" +          \"x=6 o y=0 \" + (x == 6 || y == 0) + \"<br />\" +          \"x=0 o y=3 \" + (x == 0 || y == 3) + \"<br />\" +          \"x=6 o y=3 \" + (x == 6 || y == 3) + \"<hr />\";        document.getElementById(\"demoNOT\").innerHTML =         \"x diverso valore e diverso tipo di y \" +  !(x === y) + \"<br />\" +          \"x non maggiore di y \" + !(x > y);\n        </script>\n       </p>\n      </p>\n     </p>\n    </p>\n   </p>\n  </p>\n </body>\n</html>"},
    {"title": "Slide 374","body": "Operatore condizionale JavaScript contiene anche un operatore condizionale che assegna un valore a una variabile in base a una condizione. nomeVariabile = (condizione) ? valore1:valore2    Se la variabile età è un valore inferiore a 18, il valore della variabile possibile sarà \"Troppo  \n","html": "<html>\n <body>\n  <p>\n   Inserisci la tua età e clicca sul pulsante:\n  </p>\n  <input id=\"anni\" value=\"18\"/>\n  <button onclick=\"myFunction()\">\n   Prova\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   function myFunction() {         var anni, possibile;         anni = document.getElementById(\"anni\").value;         possibile = (anni < 18) ?          \"Troppo giovane\":\"Abbastanza grande\";         document.getElementById(\"demo\").innerHTML =              possibile + \" per votare.\";       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 375","body": "Confronto di diversi tipi Il confronto di dati di diversi tipi può dare risultati imprevisti. Quando si confronta una stringa con un numero, JavaScript convertirà la stringa in un numero durante il confronto. Una stringa vuota viene convertita in 0.  \n","html": "<html>\n <body>\n  <h2>\n   Confronti JavaScript\n  </h2>\n  <p>\n   2 &lt; 12\n   <span id=\"a1\">\n   </span>\n  </p>\n  <p>\n   2 &lt; \"12\"\n   <span id=\"a2\">\n   </span>\n  </p>\n  <p>\n   2 &lt; \"John\"\n   <span id=\"a3\">\n   </span>\n  </p>\n  <p>\n   2 &gt; \"John\"\n   <span id=\"a4\">\n   </span>\n  </p>\n  <p>\n   2 == \"John\"\n   <span id=\"a5\">\n   </span>\n  </p>\n  <p>\n   \"2\" &lt; \"12\"\n   <span id=\"a6\">\n   </span>\n  </p>\n  <p>\n   \"2\" == \"12\"\n   <span id=\"a7\">\n   </span>\n  </p>\n  <script>\n   document.getElementById(\"a1\").innerHTML =  2 < 12;       document.getElementById(\"a2\").innerHTML =  2 < \"12\";       document.getElementById(\"a3\").innerHTML = 2 < \"John\";       document.getElementById(\"a4\").innerHTML = 2 > \"John\";       document.getElementById(\"a5\").innerHTML = 2 == \"John\";       document.getElementById(\"a6\").innerHTML = \"2\" < \"12\";       document.getElementById(\"a7\").innerHTML = \"2\" == \"12\";\n  </script>\n </body>\n</html>"},
    {"title": "Slide 376","body": "Confronto di stringhe Quando si confrontano due stringhe, \"2\" sarà maggiore di \"12\", perché (in ordine alfabetico) 1 (one) è minore di 2 (two). Per garantire un risultato corretto, le variabili devono essere convertite nel tipo corretto prima del confronto:  \n","html": "<html>\n <body>\n  <h2>\n   Confronto su JavaScript\n  </h2>\n  <p>\n   Inserisci la tua età e clicca su verifica:\n  </p>\n  <input id=\"anni\" value=\"18\"/>\n  <button onclick=\"myFunction()\">\n   Verifica\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   function myFunction() {         var anni, possibile;         anni = Number(document.getElementById(\"anni\").value);         if (isNaN(anni)) {           possibile = \"Il valore inserito non è un numero\";         }          else {           possibile = (anni < 18) ? \"Troppo giovane\":\"Abbastanza grande\";         }         document.getElementById(\"demo\").innerHTML = possibile;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 379","body": "if Utilizziamo l'istruzione if per specificare un blocco di codice da eseguire se una condizione è vera. if (condizione) {   /* blocco di codice da eseguire se la      condizione è vera */ }  Notare che if è in lettere minuscole. Le lettere maiuscole (If o IF) genereranno un errore.  \n","html": "<html>\n <body>\n  <p>\n   Visualizza \"Buon giorno!\" se l'ora è inferiore alle      18:00:\n  </p>\n  <p id=\"demo\">\n   Buon pomeriggio!\n  </p>\n  <script>\n   if (new Date().getHours() < 18) {         document.getElementById(\"demo\").innerHTML =          \"Buon giorno!\";       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 381","body": "else Esempio di utilizzo:  \n","html": "<html>\n <body>\n  <p>\n   Cliccare sul pulsante per visualizzare un saluto in      base all'orario:\n  </p>\n  <button onclick=\"myFunction()\">\n   Prova\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   function myFunction() {         var ora = new Date().getHours();          var saluto;         if (ora < 18) {           saluto = \"Buon giorno!\";         }          else {           saluto = \"Buona sera!\";         }           document.getElementById(\"demo\").innerHTML = saluto;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 383","body": "else if Esempio. Generare un saluto in base all'orario:  \n","html": "<html>\n <body>\n  <p>\n   Cliccare sul pulsante per ottenere un saluto in base      all'orario:\n  </p>\n  <button onclick=\"myFunction()\">\n   Saluta\n  </button>\n  <p id=\"demo\">\n  </p>\n  <script>\n   function myFunction() {         var saluto;         var time = new Date().getHours();         if (time < 14) {           saluto = \"Buongiorno!\";         }         else if (time < 19) {           saluto = \"Buon pomeriggio!\";         }         else {           saluto = \"Buona sera!\";         }         document.getElementById(\"demo\").innerHTML = saluto;       }\n  </script>\n </body>\n</html>"},
    {"title": "Slide 386","body": "switch Esempio. Determina il giorno della settimana:  \n","html": "<html>\n <body>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var giorno;       switch (new Date().getDay()) {         case 0:           giorno = \"Domenica\";           break;         case 1:           giorno = \"Lunedì\";           break;         case 2:           giorno = \"Martedì\";           break;         case 3:           giorno = \"Mercoledì\";         break;         case 4:           giorno = \"Giovedì\";           break;         case 5:           giorno = \"Venerdì\";           break;         case 6:           giorno = \"Sabato\";       }       document.getElementById(\"demo\").innerHTML = \"Oggi è \" + giorno;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 388","body": "Parola chiave default La parola chiave default specifica il codice da eseguire se non c'è corrispondenza tra maiuscole e minuscole. Il metodo getDay() restituisce il giorno della settimana come numero compreso tra 0 e 6. Se oggi non è né sabato (6) né domenica (0), scrivi un messaggio predefinito:  \n","html": "<html>\n <body>\n  <h2>\n   switch\n  </h2>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var testo;       switch (new Date().getDay()) {         case 6:           testo = \"Oggi è sabato!\";           break;         case 0:           testo = \"Oggi è domenica!\";           break;         default:           testo = \"In attesa del fine settimana!\";       }       document.getElementById(\"demo\").innerHTML = testo;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 390","body": "Casi comuni A volte si desidera che alcuni casi di switch utilizzino lo stesso codice. In questo esempio, i casi 4 e 5 condividono lo stesso blocco di codice e 0 e 6 condividono un altro blocco di codice:  \n","html": "<html>\n <body>\n  <h2>\n   switch\n  </h2>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var testo;       switch (new Date().getDay()) {         case 4:         case 5:           testo = \"Presto sarà il fine settimana!\";           break;         case 0:         case 6:           testo = \"È il fine settimana!\";           break;         default:           testo = \"In attesa del fine settimana!\";       }       document.getElementById(\"demo\").innerHTML = testo;\n  </script>\n </body>\n</html>"},
    {"title": "Slide 392","body": "Confronto rigoroso  \n","html": "<html>\n <body>\n  <h2>\n   switch\n  </h2>\n  <p id=\"demo\">\n  </p>\n  <script>\n   var x = \"0\";       switch (x) {         case 0:           testo = \"Off\";           break;         case 1:           testo = \"On\";           break;         default:           testo = \"Nessun valore corrispondente\";       }       document.getElementById(\"demo\").innerHTML = testo;\n  </script>\n </body>\n</html>"}
]

// Function used by iframes onload.
function resizeIframe(obj) {
    obj.style.height = (obj.contentWindow.document.documentElement.scrollHeight + 25) + 'px';
}

const container = Handlebars.compile(
    '<div class="card mt-3">' +
    '  <h5 class="card-header">{{title}}</h5>' +
    '  <div class="card-body">' +
    '    <p>{{body}}</p>' +
    '    <div class="p-2 mb-3 card">\n' +
    '      <pre class="border-0 prettyprint lang-html">{{html}}</pre>' +
    '    </div>' +
    '    <div class="p-2 mt-3 card">' +
    '      <iframe srcdoc="{{html}}" allowfullscreen="true" frameborder="0" scrolling="no" onload="resizeIframe(this)" on="resizeIframe(this)"></iframe>' +
    '    </div>' +
    '  </div>' +
    '</div>');

document.getElementById("progress").setAttribute("aria-valuemax", data.length.toString())

let count = 1, html = "";
for (let d of data) {
    /*
    let temp = container(d);
    if (d.html == "") temp = temp.replaceAll(/<div class="p-2 m[bt]-3 card">.*?<\/div>/gms, '')
    html += temp;
     */
    html += container(d);
    document.getElementById("progress").setAttribute("aria-valuenow", count.toString());
    document.getElementById("progress").setAttribute("style", "width: " + (count / data.length * 100) + "%");
    count++;
}

document.getElementById("container").innerHTML = html;

window.scrollTo(0, 0);